{"version":3,"sources":["scripts/State.ts","scripts/Updates.ts","scripts/utils.ts","scripts/constants.ts","scripts/OreParticle.ts","scripts/RisingText.ts","scripts/Tabs.ts","scripts/Tooltip.ts","scripts/Buildings.ts","scripts/SmithUpgrades.ts","scripts/Toast.ts","scripts/Achievements.ts","scripts/upgrades/schoolUpgrades.ts","scripts/upgrades/farmUpgrades.ts","scripts/upgrades/quarryUpgrades.ts","scripts/upgrades/churchUpgrades.ts","scripts/upgrades/factoryUpgrades.ts","scripts/upgrades/index.ts","scripts/Upgrades.ts","scripts/index.ts"],"names":[],"mappings":"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","file":"scripts.b663140b.js","sourceRoot":"../src","sourcesContent":["import Inventory from './interfaces/Inventory';\nimport Generation from './interfaces/Generation';\nimport Ore from './interfaces/Ore';\nimport Settings from './interfaces/Settings';\nimport { Tab } from './Tabs';\nimport { Building } from './Buildings';\nimport { Stats } from './interfaces/Stats';\nimport { SmithUpgrade } from './SmithUpgrades';\n\ninterface State {\n    opc: number;\n    ops: number;\n    inventory: Inventory;\n    generation: Generation;\n    ore: Ore;\n    smith: {\n        inProgress: boolean;\n        currentProgress: number;\n        currentUpgrade: SmithUpgrade;\n        power: number;\n        maxPower: number;\n    };\n    stats: Stats;\n    settings: Settings;\n    upgrades: any;\n    achievements: any;\n    textScrollerMessages: string[];\n}\n\nexport const State: State = {\n    opc: 100,\n    ops: 0,\n\n    inventory: {\n        ores: 0,\n        refined: 0\n    },\n\n    generation: {\n        lv: 1,\n        lvOnRefine: 1,\n        xp: 0,\n        maxXp: 10\n    },\n\n    ore: {\n        hp: 50,\n        maxHp: 50,\n        spriteType: 5,\n        spriteHp: 1\n    },\n\n    stats: {\n        weakSpotMultiplier: 5,\n        oreClicks: 0,\n        weakSpotClicks: 0,\n        currentCombo: 0,\n        highestCombo: 0,\n        rocksDestroyed: 0\n    },\n\n    smith: {\n        inProgress: false,\n        currentProgress: null,\n        currentUpgrade: null,\n        power: 5,\n        maxPower: 5\n    },\n\n    settings: {\n        tick: 60,\n        oreHpType: 'percentage'\n    },\n\n    upgrades: {},\n    achievements: {},\n\n    textScrollerMessages: [\n        'What is a rocks favorite fruit? ... Pom-a-granite',\n        \"Did you see that cleavage? Now that's some gneiss schist.\",\n        'All rock and no clay makes you a dull boy (or girl)',\n        \"Don't take life for granite\",\n        'What happens when you throw a blue rock in the red sea? ... It gets wet',\n        'As you can tell, these are pretty lame... Submit your own to /u/name_is_Syn',\n        'Rocks really rock!',\n        \"I can't believe I'm googling rock puns right now\",\n        'There are a few gems amongst all these terrible rock puns',\n        'These puns sure are all ore nothing',\n        'Rock pun here'\n    ]\n};\n\ninterface InstanceState {\n    selectedTab: string;\n    buyAmount: 1 | 10 | 100 | 'max';\n    oreParticles: {};\n    tabs: Tab[];\n    buildings: Building[];\n    toasts: any[];\n    smithUpgrades: SmithUpgrade[];\n    textScroller: {\n        isInProgress: boolean;\n        backlog: string[];\n    };\n}\n\nexport const InstanceState: InstanceState = {\n    selectedTab: 'store',\n    buyAmount: 1,\n    oreParticles: {},\n    tabs: [],\n    buildings: [],\n    toasts: [],\n    smithUpgrades: [],\n    textScroller: {\n        isInProgress: true,\n        backlog: []\n    }\n};\n","interface Updates {\n    updateOPS: boolean;\n\n    updateOres: boolean;\n    updateOreHp: boolean;\n    updateOreSprite: boolean;\n    updateGenerationLv: boolean;\n    updateGenerationLvOnRefine: boolean;\n    updateGenerationXp: boolean;\n\n    updateTabs: boolean;\n    updateTabContent: boolean;\n}\n\nexport const UpdatesState: Updates = {\n    updateOPS: true,\n\n    updateOres: true,\n    updateOreHp: true,\n    updateOreSprite: true,\n    updateGenerationLv: true,\n    updateGenerationLvOnRefine: true,\n    updateGenerationXp: true,\n\n    updateTabs: true,\n    updateTabContent: true\n};\n","import { Building } from './Buildings';\nimport { InstanceState } from './State';\n\nexport const select = (el: string): any => document.querySelector(`${el}`);\n\nexport const getPercentage = (current: number, max: number): number => (current / max) * 100;\n\nexport const formatNumber = (num: number): number => {\n    // return num.toFixed(0);\n    return Math.ceil(num);\n};\n\nexport const removeEl = (el: HTMLElement): void => {\n    if (el.parentNode) el.parentNode.removeChild(el);\n};\n\nexport const getRandomNum = (min = 0, max = 1, fractionDigits = 0, inclusive = true) => {\n    const precision = Math.pow(10, Math.max(fractionDigits, 0));\n    const scaledMax = max * precision;\n    const scaledMin = min * precision;\n    const offset = inclusive ? 1 : 0;\n    const num = Math.floor(Math.random() * (scaledMax - scaledMin + offset)) + scaledMin;\n\n    return num / precision;\n};\n\nexport const getCodeName = (str: string): string => {\n    return str\n        .replace(/(?:^\\w|[A-Z]|\\b\\w)/g, function (word, index) {\n            return index === 0 ? word.toLowerCase() : word.toUpperCase();\n        })\n        .replace(/\\s+/g, '')\n        .replace(/\\./g, '');\n};\n\nexport const updateEl = (targetEl: HTMLElement, updates: HTMLElement): void => {\n    targetEl.innerHTML = '';\n    targetEl.append(updates);\n};\n\nexport const createEl = (type: string, classes: string[] = [], content: string | number = ''): HTMLElement => {\n    const el = document.createElement(type);\n\n    classes.forEach((c: string) => el.classList.add(c));\n\n    el.innerHTML = content + '';\n\n    return el;\n};\n\nexport const beautifyNumber = (number: number) => {\n    var SI_PREFIXES = [\n        '', // number is less than 1,000\n        'Thousand', // number is in the thousands\n        'Million',\n        'Billion',\n        'Trillion',\n        'Quadrillion',\n        'Quintillion',\n        'Sextillion',\n        'Septillion',\n        'Octillion',\n        'Nonillion',\n        'Decillion',\n        'Undecillion',\n        'Dodecillion',\n        'Tredecillion',\n        'Quattuordecillion',\n        'Quindecillion',\n        'Sexdecillion',\n        'Septendecillion',\n        'Octodecillion',\n        'Novemdecillion',\n        'Vigintillion',\n        'Unvigintillion',\n        'Dovigintillion',\n        'Trevigintillion',\n        'Quattuorvigintillion',\n        'Quinvigintillion',\n        'Sexvigintillion',\n        'Septenvigintillion',\n        'Octovigintillion',\n        'Novemvigintillion',\n        'Trigintillion',\n        'Untrigintillion',\n        'Dotrigintillion',\n        'Tretrigintillion',\n        'Quattuortrigintillion',\n        'Quintrigintillion',\n        'Sextrigintillion',\n        'Septentrigintillion',\n        'Octotrigintillion',\n        'Novemtrigintillion',\n        'F*ckloadillion',\n        'F*cktonillion'\n    ];\n\n    if (!number) return 0;\n    if (number <= 10) {\n        // if ( number % 1 == 0 ) return number.toFixed( 0 )\n\n        if (Math.round(number) === number) return number;\n\n        return number.toFixed(1);\n    }\n    // what tier? (determines SI prefix)\n    var tier = (Math.log10(number) / 3) | 0;\n\n    // if zero, we don't need a prefix\n    if (tier === 0) return Math.round(number);\n    // if (tier === 1) return Math.round(number)\n\n    // get prefix and determine scale\n    var prefix = SI_PREFIXES[tier];\n    var scale = Math.pow(10, tier * 3);\n\n    // scale the number\n    var scaled = number / scale;\n\n    // format number and add prefix as suffix\n    return parseFloat(scaled.toFixed(2)) + ' ' + prefix;\n};\n\nexport const getGeometricSequencePrice = (b: Building) => {\n    // 10 = 211\n\n    if (InstanceState.buyAmount !== 'max') {\n        const alreadyOwned = (b.basePrice * (1 - Math.pow(b.priceScale, b.owned))) / (1 - b.priceScale);\n        const total = (b.basePrice * (1 - Math.pow(b.priceScale, InstanceState.buyAmount + b.owned))) / (1 - b.priceScale);\n\n        return total - alreadyOwned;\n    }\n\n    // return (\n    //     b.currentPrice * ((Math.pow(b.priceScale, InstanceState.buyAmount - b.owned + 1) - Math.pow(1, InstanceState.buyAmount)) / 1.12 - 1)\n    // );\n};\n\nexport const findCodeNameInArr = (codeName: string, arr: any[]) => {\n    return arr.find((obj) => obj.codeName === codeName);\n};\n\nexport const getRandomColor = () => {\n    const letters = '0123456789ABCDEF';\n    let color = '#';\n    for (let i = 0; i < 6; i++) {\n        color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n};\n\nexport const getRandomFromArr = (arr) => arr[Math.floor(Math.random() * arr.length)];\n\nexport const isObjEmpty = (obj) => {\n    return Object.keys(obj).length === 0;\n};\n\nexport const sortObj = (obj, key) => {\n    let entries = Object.entries(obj);\n    return entries.sort((a: any, b: any) => a[1][key] - b[1][key]);\n};\n","import { select as s } from './utils';\n\nexport const pageContainer: HTMLElement = s('.page-container');\nexport const gameContainerRight: HTMLElement = s('.game-container-right');\n\nexport const torchLeft: HTMLElement = s('.torch-left');\nexport const torchRight: HTMLElement = s('.torch-right');\n\nexport const textScrollerContainerEl: HTMLElement = s('.text-scroller-container');\nexport const textScrollerTextEl: HTMLElement = s('.text-scroller-container p');\n\nexport const toastsContainerEl: HTMLElement = s('.toasts-container');\nexport const toastsContainerLeftEl: HTMLElement = s('.toasts-container .left');\nexport const toastsContainerRightEl: HTMLElement = s('.toasts-container .right');\n\nexport const oreSpriteContainerEl: HTMLElement = s('.ore-sprite-container');\nexport const oreSpriteEl: HTMLImageElement = s('.ore-sprite');\nexport const oreHpEl: HTMLElement = s('.ore-hp');\n\nexport const topbarInventoryEl: HTMLElement = s('.topbar-inventory');\nexport const topbarInventoryOresEl: HTMLElement = s('.topbar-inventory-ores > .amount');\nexport const topbarInventoryGenerationLv: HTMLElement = s('.topbar-inventory-generation > .level');\nexport const topbarInventoryGenerationLvOnRefine: HTMLElement = s('.topbar-inventory-generation > .level-on-refine');\nexport const topbarInventoryGenerationXpBarEl: HTMLElement = s('.topbar-inventory-generation-xp .bar');\nexport const comboSignEl: HTMLElement = s('.combo-sign');\nexport const comboSignNumberEl: HTMLElement = s('.combo-sign span');\n\nexport const particlesCanvasEl: HTMLCanvasElement = s('#particles');\nexport const particlesCanvasContext: CanvasRenderingContext2D = particlesCanvasEl.getContext('2d');\n\nexport const tabsWrapperEl: HTMLElement = s('.tabs-wrapper');\nexport const tabsContentWrapperEl: HTMLElement = s('.tabs-content-wrapper');\n\nexport const tooltipWrapperEl: HTMLElement = s('.tooltip-wrapper');\n","import { getRandomNum } from './utils';\nimport { particlesCanvasContext as ctx, oreSpriteEl } from './constants';\nimport { InstanceState } from './State';\n\nlet oreParticlesIndex = 0;\n\nconst settings = {\n    gravity: 0.5,\n    maxLife: 100\n};\n\nexport const generateOreParticles = (event?: MouseEvent, amount = 4) => {\n    for (let i = 0; i < amount; i++) new OreParticle(event);\n};\n\nconst OreParticle = function (event?: MouseEvent) {\n    // Particle position\n    if (event) {\n        this.x = event.clientX;\n        this.y = event.clientY;\n    } else {\n        const oreSpriteDimensions = oreSpriteEl.getBoundingClientRect();\n        this.x = getRandomNum(oreSpriteDimensions.left, oreSpriteDimensions.right);\n        this.y = oreSpriteDimensions.top;\n    }\n\n    // Velocities\n    this.vx = getRandomNum(-2, 2, 5);\n    this.vy = getRandomNum(-2, -1, 5);\n\n    // Size\n    this.size = getRandomNum(0.5, 2.5, 3);\n\n    // Adding particle to index\n    oreParticlesIndex += 1;\n    InstanceState.oreParticles[oreParticlesIndex] = this;\n    this.id = oreParticlesIndex;\n    this.life = 0;\n    this.opacity = 1;\n};\n\nOreParticle.prototype.draw = function () {\n    // Move particle\n    this.x += this.vx;\n    this.y += this.vy;\n\n    // Adjust for gravity\n    this.vy += settings.gravity * Math.random();\n\n    // Age particle\n    this.life += 1;\n    this.opacity -= 0.02;\n\n    if (this.life > settings.maxLife || this.y >= window.innerHeight) {\n        delete InstanceState.oreParticles[this.id];\n    }\n\n    // Draw particle\n    const color = getRandomNum(150, 200);\n\n    ctx.beginPath();\n    ctx.fillStyle = `rgba( 255, 255, 255, ${this.opacity} )`;\n    // ctx.fillStyle = `rgba( ${color}, ${color}, ${color}, ${this.opacity} )`;\n    ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2, true);\n    ctx.closePath();\n    ctx.fill();\n};\n","import { getRandomNum, removeEl, getRandomColor } from './utils';\nimport { pageContainer, oreSpriteEl } from './constants';\n\nexport const generateRisingText = (event: MouseEvent, type: string, amount?: number) => {\n    const el = document.createElement('div');\n\n    el.style.position = 'absolute';\n    el.style.pointerEvents = 'none';\n    el.style.color = 'white';\n    el.style.fontSize = '24px';\n    el.style.fontFamily = 'Germania One';\n    el.style.zIndex = '2';\n    el.style.textShadow = '0 0 1px rgba(0, 0, 0, 0.5)';\n    el.style.animation = 'flyingNumber 2s forwards ease-out';\n\n    switch (type) {\n        case 'buy':\n            el.style.color = 'crimson';\n            el.style.fontSize = '30px';\n            el.innerHTML = `-$`;\n            break;\n\n        case 'weakSpot':\n            el.style.fontSize = '28px';\n            el.style.animationDuration = '2.5s';\n            el.innerHTML = `+${amount}`;\n            break;\n\n        case 'combo':\n            el.innerHTML = `${amount} hit combo`;\n            el.style.color = getRandomColor();\n            el.style.fontSize = '35px';\n            el.style.animationDuration = '3s';\n            break;\n\n        case 'buildingOps':\n            let oreSpriteDimensions = oreSpriteEl.getBoundingClientRect();\n            el.style.animation = 'buildingFlyingNumber 1.2s ease-out';\n            el.style.left = (oreSpriteDimensions.left + oreSpriteDimensions.right) / 2 + 'px';\n            el.style.top = (oreSpriteDimensions.top + oreSpriteDimensions.bottom) / 2 + 'px';\n            el.innerHTML = `+${amount}`;\n            break;\n\n        default:\n            el.innerHTML = `+${amount}`;\n            break;\n    }\n\n    if (event) {\n        el.style.left = event.clientX + getRandomNum(-20, 20) + 'px';\n        el.style.top = event.clientY + getRandomNum(-5, 5) + 'px';\n    }\n\n    pageContainer.append(el);\n\n    el.addEventListener('animationend', () => removeEl(el));\n};\n","import { getCodeName } from './utils';\nimport { State, InstanceState } from './State';\nimport { UpdatesState } from './Updates';\n\nexport interface Tab {\n    name: string;\n    codeName?: TabName;\n    isLocked: boolean;\n}\n\nexport type TabName = 'store' | 'smith';\n\nconst Tab = function (o) {\n    this.name = o.name;\n    this.codeName = getCodeName(o.name);\n    this.isLocked = o.isLocked;\n};\n\nconst tabs = [\n    {\n        name: 'store',\n        isLocked: false\n    },\n    {\n        name: 'smith',\n        isLocked: true\n    }\n];\n\nexport const instantiateTabs = (t: Tab[] = JSON.parse(localStorage.getItem('tabs')) || tabs): void => {\n    const builtTabs = [];\n\n    t.forEach((tab: Tab) => {\n        builtTabs.push(new Tab(tab));\n    });\n\n    InstanceState.tabs = builtTabs;\n};\n","import { tooltipWrapperEl, gameContainerRight } from './constants';\nimport { getGeometricSequencePrice, beautifyNumber, getPercentage } from './utils';\nimport { Building } from './Buildings';\nimport { State } from './State';\nimport { SmithUpgrade } from './SmithUpgrades';\n\ninterface Tooltip {\n    type: 'building' | 'smithUpgrade' | 'upgrade';\n    building?: Building;\n    smithUpgrade?: SmithUpgrade;\n    upgrade?: any;\n}\n\nexport const hideTooltip = () => {\n    tooltipWrapperEl.innerHTML = '';\n    tooltipWrapperEl.classList.remove('visible');\n};\n\nexport const showTooltip = (event: MouseEvent, tt: Tooltip) => {\n    tooltipWrapperEl.classList.add('visible');\n\n    let str = '';\n\n    switch (tt.type) {\n        case 'building':\n            const price = getGeometricSequencePrice(tt.building);\n            str += `\n                <div class='tooltip-container tooltip-building tooltip-building-${tt.building.codeName}'>\n                    <div class='tooltip-top'>\n                        <img src='./images/building-${tt.building.codeName}.png'/>\n                        <p>${tt.building.name}</p>\n                        <p class='price' style='${State.inventory.ores < price ? 'color: crimson' : ''}'>\n                            <img src='./images/ore.png'/>\n                            ${beautifyNumber(price)}\n                        </p>\n                    </div>\n                    <div class='tooltip-middle'>\n                        <p>${tt.building.desc}</p>\n                        <div class='stats'>\n                            <p>Each ${tt.building.name} generates <strong>${tt.building.production}</strong> ores per second.</p>`;\n\n            if (tt.building.owned > 0) {\n                str += `\n                    <p><strong>${tt.building.owned} </strong>${\n                    tt.building.owned > 1 ? `${tt.building.namePlural} are` : `${tt.building.name} is`\n                } generating <strong>${tt.building.owned * tt.building.production}</strong> ore per second.</p>\n                    <p class='building-percentage'>${tt.building.name}s are currently generating <strong>${beautifyNumber(\n                    getPercentage(tt.building.owned * tt.building.production, State.ops)\n                )}%</strong> of your total OpS</p>\n                    `;\n            }\n\n            str += `\n                        </div>\n                    </div>\n                    <div class='tooltip-bottom'>\n                        <p>${tt.building.flavorText}</p>\n                    </div>\n                </div>\n            `;\n            break;\n        case 'upgrade':\n            str += `\n                <div class='tooltip-container tooltip-upgrade tooltip-upgrade-${tt.upgrade.codeName}'>\n                    <div class='tooltip-top'>\n                        <img src='./images/upgrade-${tt.upgrade.codeName}.png'/>\n                        <p>${tt.upgrade.name}</p>\n                        <p class='price' style='${State.inventory.ores < tt.upgrade.price ? 'color: crimson' : ''}'>\n                            <img src='./images/ore.png'/>\n                            ${beautifyNumber(tt.upgrade.price)}\n                        </p>\n                    </div>\n                    <div class='tooltip-middle'>\n                        <p>${tt.upgrade.desc}</p>\n                    </div>\n                    <div class='tooltip-bottom'>\n                        <p>${tt.upgrade.flavorText}</p>\n                    </div>\n                </div>\n            `;\n            break;\n        case 'smithUpgrade':\n            const upgrade = tt.smithUpgrade;\n            str += `\n                <div class='tooltip-container tooltip-smithUpgrade tooltip-smithUpgrade-${upgrade.codeName}'>\n                    <div class='tooltip-top'>\n                        <img src='./images/smithUpgrade-${upgrade.codeName}.png'/>\n                        <p>${upgrade.name}</p>\n                    </div>\n                    <div class='tooltip-middle'>\n                        <p>${upgrade.desc}</p>\n                        <div class='cost'>\n                            <p>Requires:</p>\n                            <p>Refined Ores: ${upgrade.cost}</p>\n                            <p>Power Needed: ${beautifyNumber(upgrade.powerNeeded)}</p>\n                        </div>\n                    </div>\n                    `;\n            if (upgrade.flavorText) {\n                str += `\n                    <div class='tooltip-bottom'>\n                        <p>${upgrade.flavorText}</p>\n                    </div>`;\n            }\n\n            str += `\n                </div>\n            `;\n            break;\n\n        default:\n            console.log('no tooltip yet for this type:', tt.type);\n    }\n\n    tooltipWrapperEl.innerHTML = str;\n\n    switch (tt.type) {\n        default:\n            const tooltipWidth = 350;\n\n            tooltipWrapperEl.style.width = tooltipWidth + 'px';\n            tooltipWrapperEl.style.top = event.clientY - tooltipWrapperEl.getBoundingClientRect().height / 2 + 'px';\n            tooltipWrapperEl.style.left = gameContainerRight.getBoundingClientRect().left - tooltipWidth - 20 + 'px';\n    }\n};\n","import { getCodeName, getGeometricSequencePrice } from './utils';\nimport { spend, updateOPS } from './index';\nimport { State, InstanceState } from './State';\nimport { UpdatesState } from './Updates';\nimport { showTooltip } from './Tooltip';\nimport { generateRisingText } from './RisingText';\n\nexport interface Building {\n    name: string;\n    codeName?: string;\n    namePlural: string;\n    desc: string;\n    flavorText: string;\n    production: number;\n    currentPrice?: number;\n    basePrice: number;\n    priceScale: number;\n    isLocked: boolean;\n    isHidden: boolean;\n    owned?: number;\n    buy?: Function;\n    mousemove?: Function;\n    onBuy?: any;\n}\n\nlet id = 0;\nconst Building = function (b) {\n    this.id = id;\n    this.name = b.name;\n    this.codeName = getCodeName(b.name);\n    this.namePlural = b.namePlural;\n    this.desc = b.desc;\n    this.flavorText = b.flavorText;\n    this.currentPrice = b.currentPrice || b.basePrice;\n    this.basePrice = b.basePrice;\n    this.priceScale = b.priceScale;\n    this.production = b.production;\n    this.isLocked = b.isLocked;\n    this.isHidden = b.isHidden;\n    this.owned = b.owned || 0;\n    this.onBuy = b.onBuy || null;\n    id += 1;\n\n    this.buy = (event) => {\n        if (spend(getGeometricSequencePrice(this))) {\n            this.owned += InstanceState.buyAmount;\n            this.currentPrice = this.basePrice * Math.pow(this.priceScale, this.owned);\n\n            updateOPS(); // Need to call the function directly so OPS gets calculated instantly\n\n            UpdatesState.updateOres = true;\n            UpdatesState.updateTabContent = true;\n\n            updateBuildingsVisibility(this.id);\n\n            if (this.onBuy) {\n                if (this.onBuy.unlockUpgrade) {\n                    this.onBuy.unlockUpgrade.forEach((upgrade) => {\n                        if (this.owned >= upgrade.amountNeeded) {\n                            State.upgrades[upgrade.name].isLocked = false;\n                            UpdatesState.updateTabContent = true;\n\n                            console.log('UPGRADES', State.upgrades);\n                        }\n                    });\n                }\n            }\n\n            generateRisingText(event, 'buy');\n            showTooltip(event, { type: 'building', building: this });\n        }\n    };\n\n    this.mousemove = (event) => showTooltip(event, { type: 'building', building: this });\n};\n\nconst updateBuildingsVisibility = (index: number) => {\n    const nextBuilding = InstanceState.buildings[index + 1];\n    const nextNextNextBuilding = InstanceState.buildings[index + 3];\n    if (nextBuilding) nextBuilding.isLocked = false;\n    if (nextNextNextBuilding) nextNextNextBuilding.isHidden = false;\n};\n\nconst buildings: Building[] = [\n    {\n        name: 'School',\n        namePlural: 'Schools',\n        desc: 'Teach students about the wonders of ore.',\n        flavorText: \"Jesus christ Marie, they're minerals!\",\n        production: 0.5,\n        basePrice: 12,\n        priceScale: 1.12,\n        isLocked: false,\n        isHidden: false,\n        onBuy: {\n            unlockUpgrade: [\n                { name: 'Composition Notebooks', amountNeeded: 1 },\n                { name: 'No. 2 Pencil', amountNeeded: 5 },\n                { name: '3 Ring Binder', amountNeeded: 10 },\n                { name: 'Looseleaf', amountNeeded: 20 },\n                { name: 'Schoolbag', amountNeeded: 50 },\n                { name: 'Fresh Pink Eraser', amountNeeded: 100 },\n                { name: 'Gum', amountNeeded: 200 },\n                { name: 'Report Card', amountNeeded: 400 }\n            ]\n        }\n    },\n    {\n        name: 'Farm',\n        namePlural: 'Farms',\n        desc: 'Cultivate the lands for higher quality ores.',\n        flavorText: 'This totally makes sense...',\n        production: 2,\n        basePrice: 240,\n        priceScale: 1.15,\n        isLocked: true,\n        isHidden: false,\n        onBuy: {\n            unlockUpgrade: [\n                { name: 'Manure Spreader', amountNeeded: 1 },\n                { name: 'Pitchfork', amountNeeded: 5 },\n                { name: 'Tractor', amountNeeded: 10 },\n                { name: 'Rotary Cutter', amountNeeded: 20 },\n                { name: 'Hoe', amountNeeded: 50 },\n                { name: 'Baler', amountNeeded: 100 },\n                { name: 'Sickle', amountNeeded: 200 },\n                { name: 'Scythe', amountNeeded: 400 }\n            ]\n        }\n    },\n    {\n        name: 'Quarry',\n        namePlural: 'Quarries',\n        desc: 'Designated mining area.',\n        flavorText: 'Diggy diggy hole.',\n        production: 20,\n        basePrice: 2_520,\n        priceScale: 1.15,\n        isLocked: true,\n        isHidden: false,\n        onBuy: {\n            unlockUpgrade: [\n                { name: 'Floodlights', amountNeeded: 1 },\n                { name: 'Twill Rope', amountNeeded: 5 },\n                { name: 'Wooden Compass', amountNeeded: 10 },\n                { name: 'Ore Filter', amountNeeded: 20 },\n                { name: 'Waterproof Tape', amountNeeded: 50 },\n                { name: 'Metallic Compass', amountNeeded: 100 },\n                { name: 'Miners Mask', amountNeeded: 200 },\n                { name: 'Cape Chisel', amountNeeded: 400 }\n            ]\n        }\n    },\n    {\n        name: 'Church',\n        namePlural: 'Churches',\n        desc: 'Praise to ye Old Ore Gods.',\n        flavorText: 'In ore name we pray, amen.',\n        production: 320,\n        basePrice: 37_800,\n        priceScale: 1.15,\n        isLocked: true,\n        isHidden: true,\n        onBuy: {\n            unlockUpgrade: [\n                { name: 'Scripture Reading', amountNeeded: 1 },\n                { name: 'Communion', amountNeeded: 5 },\n                { name: 'Worship Session', amountNeeded: 10 },\n                { name: '7th Day', amountNeeded: 20 },\n                { name: 'Eden Apple', amountNeeded: 50 },\n                { name: 'Apocalypse', amountNeeded: 100 },\n                { name: 'Judgement Day', amountNeeded: 200 },\n                { name: 'Rapture', amountNeeded: 400 }\n            ]\n        }\n    },\n    {\n        name: 'Factory',\n        namePlural: 'Factories',\n        desc: 'Manufacture your ores.',\n        flavorText: 'Assembly line this SH%* up!',\n        production: 4_480,\n        basePrice: 490_000,\n        priceScale: 1.15,\n        isLocked: true,\n        isHidden: true,\n        onBuy: {\n            unlockUpgrade: [\n                { name: 'Rubber Conveyor Belt', amountNeeded: 1 },\n                { name: 'Floppy Squiggle Tubes', amountNeeded: 5 },\n                { name: 'Clicky Squish Buttons', amountNeeded: 10 },\n                { name: 'Metallic Magnetic Panels', amountNeeded: 20 },\n                { name: 'Hydroponic Auxilleration', amountNeeded: 50 }\n            ]\n        }\n    },\n    {\n        name: 'Crypt',\n        namePlural: 'Crypts',\n        desc: 'Raise dead ores from the graves.',\n        flavorText: 'Spooky dooky ores.',\n        production: 67_200,\n        basePrice: 7_900_000,\n        priceScale: 1.15,\n        isLocked: true,\n        isHidden: true\n    },\n    {\n        name: 'Hospital',\n        namePlural: 'Hospitals',\n        desc: 'Heal the poor ol damaged ores.',\n        flavorText: 'An apple a day keeps the ore cancer away.',\n        production: 1_350_000,\n        basePrice: 196_600_000,\n        priceScale: 1.15,\n        isLocked: true,\n        isHidden: true\n    },\n    {\n        name: 'Citadel',\n        namePlural: 'Citadels',\n        desc: 'wip',\n        flavorText: 'wip',\n        production: 14_800_000,\n        basePrice: 2_800_000_000,\n        priceScale: 1.15,\n        isLocked: true,\n        isHidden: true\n    },\n    {\n        name: 'Xeno Spaceship',\n        namePlural: 'Xeno Spaceships',\n        desc: 'wip',\n        flavorText: 'wip',\n        production: 192_200_000,\n        basePrice: 49_500_000_000,\n        priceScale: 1.15,\n        isLocked: true,\n        isHidden: true\n    },\n    {\n        name: 'Sky Castle',\n        namePlural: 'Sky Castles',\n        desc: 'Use magic beans to reach an egg based source of ores.',\n        flavorText: 'wip',\n        production: 3_800_000_000,\n        basePrice: 1_240_000_000_000,\n        priceScale: 1.15,\n        isLocked: true,\n        isHidden: true\n    },\n    {\n        name: 'Eon Portal',\n        namePlural: 'Eon Portals',\n        desc: 'Steal ore from your past and future self.',\n        flavorText: 'wip',\n        production: 45_150_000_000,\n        basePrice: 18_580_000_000_000,\n        priceScale: 1.15,\n        isLocked: true,\n        isHidden: true\n    },\n    {\n        name: 'Sacred Mine',\n        namePlural: 'Sacred Mines',\n        desc: 'wip',\n        flavorText: 'wip',\n        production: 691_900_000_000,\n        basePrice: 297_200_000_000_000,\n        priceScale: 1.15,\n        isLocked: true,\n        isHidden: true\n    },\n    {\n        name: 'O.A.R.D.I.S.',\n        namePlural: 'O.A.R.D.I.S.',\n        desc: 'wip',\n        flavorText: 'wip',\n        production: 17_300_000_000_000,\n        basePrice: 8_915_000_000_000_000,\n        priceScale: 1.15,\n        isLocked: true,\n        isHidden: true\n    },\n    {\n        name: 'Final Destination',\n        namePlural: 'Final Destinations',\n        desc: 'The Final Destination.',\n        flavorText: 'Thank you so much for playing <3.',\n        production: 999_999_999_999_999_999,\n        basePrice: 999_999_999_999_999_999_999_999_999_999_999,\n        priceScale: 1.15,\n        isLocked: true,\n        isHidden: true\n    }\n];\n\nexport function instantiateBuildings(b = JSON.parse(localStorage.getItem('buildings')) || buildings) {\n    const builtBuildings = [];\n\n    b.forEach((building: Building) => {\n        builtBuildings.push(new Building(building));\n    });\n\n    InstanceState.buildings = builtBuildings;\n}\n","import { getCodeName, removeEl } from './utils';\nimport { InstanceState, State } from './State';\nimport { spend, completeSmithUpgrade } from '.';\nimport { UpdatesState } from './Updates';\nimport { generateRisingText } from './RisingText';\nimport { hideTooltip } from './Tooltip';\n\n// once quest board is unlocked,\n// upgrade called Boots of Swiftness\n// that'll increase quest speed\nconst SECOND = 1000;\nconst MINUTE = 1000 * 60;\nconst HOUR = MINUTE * 60;\n\nexport interface SmithUpgrade {\n    name: string;\n    codeName?: string;\n    desc: string;\n    flavorText?: string;\n    powerNeeded: number;\n    cost: number;\n    requires?: {};\n    isLocked: boolean;\n    isInProgress?: boolean;\n    isNew?: boolean;\n    isOwned?: boolean;\n    isRepeatable?: boolean;\n    priceIncrease?: number;\n    complete?: () => void;\n    start?: () => void;\n    buy?: (event: MouseEvent) => void;\n    removeNew?: (event: MouseEvent) => void;\n    startedOn?: Date;\n    completedOn?: Date;\n    onComplete?: {};\n}\n\nconst SmithUpgrade = function (u) {\n    this.name = u.name;\n    this.codeName = getCodeName(u.name);\n    this.desc = u.desc;\n    this.flavorText = u.flavorText || null;\n    this.powerNeeded = u.powerNeeded;\n    this.cost = u.cost;\n    this.requires = u.requires || [];\n    this.isLocked = u.isLocked;\n    this.isInProgress = u.isInProgress || false;\n    this.isNew = u.isNew || true;\n    this.isOwned = u.isOwned || false;\n    this.isRepeatable = u.isRepeatable || false;\n    if (this.isRepeatable) this.priceIncrease = u.priceIncrease;\n    this.onComplete = u.onComplete || null;\n\n    this.complete = () => {\n        this.completedOn = new Date();\n        this.isInProgress = false;\n\n        UpdatesState.updateTabContent = true;\n        UpdatesState.updateTabs = true;\n\n        State.smith.currentProgress = 0;\n        State.smith.inProgress = false;\n        State.smith.currentUpgrade = this;\n\n        completeSmithUpgrade(this.codeName);\n\n        if (this.isRepeatable) {\n            this.powerNeeded *= this.priceIncrease;\n        }\n\n        if (this.onComplete) {\n            if (this.onComplete.unlockSmithUpgrade) {\n                this.onComplete.unlockSmithUpgrade.forEach((upgrade) => {\n                    unlockSmithUpgrade(upgrade, this.codeName);\n                });\n            }\n        }\n    };\n\n    this.start = () => {\n        console.log('starting a smith upgrade');\n        this.isInProgress = true;\n        this.startedOn = new Date();\n\n        UpdatesState.updateTabContent = true;\n        UpdatesState.updateTabs = true;\n\n        State.smith.currentProgress = 0;\n        State.smith.inProgress = true;\n        State.smith.currentUpgrade = this;\n    };\n\n    this.buy = (event: MouseEvent) => {\n        console.log('buying a smith upgrade', event);\n        if (!State.smith.inProgress) {\n            if (spend(this.cost, 'refined')) {\n                generateRisingText(event, 'buy');\n                hideTooltip();\n                this.start();\n            }\n        }\n    };\n\n    this.removeNew = (event: any) => {\n        this.isNew = false;\n        if (event.target.children[1]) {\n            removeEl(event.target.children[1]);\n        }\n    };\n};\n\nconst unlockSmithUpgrade = (targetUpgrade: string, previousUpgrade: string) => {\n    const upgrade = InstanceState.smithUpgrades.find((upgrade) => upgrade.codeName === targetUpgrade);\n\n    let unlock = true;\n\n    // Checks to see if there is a requires object\n    if (upgrade.requires) {\n        // Loop through the object\n        for (let upgradeName in upgrade.requires) {\n            // Check if key is equal to a just-completed upgrade\n            if (upgradeName === previousUpgrade) {\n                // Set to true (owned)\n                upgrade.requires[upgradeName] = true;\n            }\n            // If any values are false, don't unlock\n            if (upgrade.requires[upgradeName] === false) {\n                console.log('You dont own:', upgradeName);\n                unlock = false;\n            }\n        }\n    }\n\n    if (unlock) {\n        console.log('unlocking upgrade:', upgrade);\n        upgrade.isLocked = false;\n    }\n};\n\nconst smithUpgrades: SmithUpgrade[] = [\n    {\n        name: 'Fragility Spectacles',\n        desc: 'Allows you to spot \"weak spots\" within the ore. Hitting the weak spot generates 5x the normal amount.',\n        flavorText: 'I can see... I can FIGHT!',\n        powerNeeded: 15,\n        // powerNeeded: 150,\n        cost: 0,\n        isLocked: false,\n        onComplete: {\n            unlockSmithUpgrade: ['smithPowerUp']\n        }\n    },\n    {\n        name: 'Quest Board',\n        desc: 'Onwards to adventure! Go on quests to find greater rewards and even mysterious artifacts!',\n        flavorText: \"Fetch quests are the greatest aren't they?\",\n        powerNeeded: 1000,\n        cost: 1,\n        isLocked: false\n    },\n    {\n        name: 'Smith Power Up',\n        desc: 'Increase maximum smith power by a set amount',\n        powerNeeded: 100,\n        cost: 0,\n        isLocked: true,\n        requires: {\n            fragilitySpectacles: false\n        },\n        isRepeatable: true,\n        priceIncrease: 2.5\n    }\n];\n\nexport function instantiateSmithUpgrades(u = JSON.parse(localStorage.getItem('smithUpgrades')) || smithUpgrades) {\n    const builtSmithUpgrades: SmithUpgrade[] = [];\n\n    u.forEach((upgrade: SmithUpgrade) => {\n        builtSmithUpgrades.push(new SmithUpgrade(upgrade));\n    });\n\n    InstanceState.smithUpgrades = builtSmithUpgrades;\n}\n","import { InstanceState } from './State';\nimport { createEl, removeEl } from './utils';\nimport { toastsContainerEl, toastsContainerLeftEl, toastsContainerRightEl } from './constants';\n\nlet toastIndex = 0;\n\nexport const Toast = function (type, achievement?) {\n    const toastEl = createEl('div', ['toast', `toast-${toastIndex}`]);\n\n    this.id = toastIndex;\n    this.self = toastEl;\n\n    this.close = () => {\n        this.self.addEventListener('transitionend', () => removeEl(this.self));\n        this.self.classList.add('close');\n    };\n\n    InstanceState.toasts.push(this);\n    toastIndex++;\n\n    switch (type) {\n        case 'achievement':\n            toastEl.classList.add('toast-achievement');\n            const closeBtn = createEl('svg');\n            closeBtn.innerHTML = `\n                <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon icon-tabler icon-tabler-x\" width=\"40\" height=\"40\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"#ffffff\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                    <path stroke=\"none\" d=\"M0 0h24v24H0z\"/>\n                    <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\" />\n                    <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\" />\n                </svg>\n            `;\n            closeBtn.addEventListener('click', () => this.close());\n            toastEl.innerHTML = `\n                <div class='toast-top'>\n                    <img src='https://via.placeholder.com/32/'>\n                    <h2 class='achievement-name'>${achievement.name}</h2>\n                </div>\n                <div class='toast-middle'>${achievement.desc}</div>\n            `;\n\n            toastEl.append(closeBtn);\n            toastsContainerLeftEl.append(toastEl);\n            break;\n\n        case 'notification':\n            toastsContainerRightEl.append(toastEl);\n            break;\n\n        default:\n            console.log('type not recognized', type);\n    }\n};\n","import { getCodeName, isObjEmpty } from './utils';\nimport { Toast } from './Toast';\nimport { State } from './State';\n\ninterface Achievement {\n    name: string;\n    desc: string;\n}\n\nconst Achievement = function (achievement) {\n    this.name = achievement.name;\n    this.codeName = getCodeName(achievement.name);\n    this.desc = achievement.desc;\n    this.isWon = achievement.won || false;\n\n    this.win = () => {\n        if (!this.isWon) {\n            this.isWon = true;\n            new Toast('achievement', this);\n        }\n    };\n};\n\nlet achievements: Achievement[] = [\n    { name: 'Newbie Miner', desc: 'Break your first rock' },\n    { name: 'Novice Miner', desc: 'Break 10 rocks' },\n    { name: 'Intermediate Miner', desc: 'Break 25 rocks' },\n    { name: 'Advanced Miner', desc: 'Break 50 rocks' },\n    { name: 'Master Miner', desc: 'Break 100 rocks' },\n    { name: 'Chief Miner', desc: 'Break 200 rocks' },\n    { name: 'Exalted Miner', desc: 'Break 500 rocks' },\n    { name: 'God Miner', desc: 'Break 1000 rocks' },\n\n    { name: 'Combo Baby', desc: 'Reach a 5 hit combo' },\n    { name: 'Combo Pleb', desc: 'Reach a 20 hit combo' },\n    { name: 'Combo Squire', desc: 'Reach a 50 hit combo' },\n    { name: 'Combo Knight', desc: 'Reach a 100 hit combo' },\n    { name: 'Combo King', desc: 'Reach a 200 hit combo' },\n    { name: 'Combo Master', desc: 'Reach a 350 hit combo' },\n    { name: 'Combo Devil', desc: 'Reach a 666 hit combo' },\n    { name: 'Combo Jackpot', desc: 'Reach a 777 hit combo' },\n    { name: 'Combo God', desc: 'Reach a 1000 hit combo' },\n    { name: 'Combo Saiyan', desc: 'Reach a 5000 hit combo' },\n    { name: 'Combo Saitama', desc: 'Reach a 10000 hit combo' },\n\n    { name: 'Not Even A Scratch', desc: 'Deal more than 100 damage from a hit' },\n    { name: 'Didnt Even Hurt', desc: 'Deal more than 1,000 damage from a hit' },\n    { name: 'That Tickled', desc: 'Deal more than 100,000 damage from a hit' },\n    { name: 'I Felt That', desc: 'Deal more than 1,000,000 damage from a hit' },\n\n    { name: 'Ore-aid Stand', desc: 'Reach 50 OpS' },\n    { name: 'Ore Store', desc: 'Reach 10,000 OpS' },\n    { name: '401k', desc: 'Reach 401,000 OpS' },\n    { name: 'Retirement Plan', desc: 'Reach 5,000,000 OpS' },\n    { name: 'Hedge Fund', desc: '1,000,000,000 OpS' }\n];\n\nexport const instantiateAchievements = (): void => {\n    const state = JSON.parse(localStorage.getItem('state'));\n\n    const builtAchievements = {};\n\n    if (state) {\n        if (!isObjEmpty(state.achievements)) {\n            for (let key in state.achievements) {\n                builtAchievements[key] = new Achievement(state.achievements[key]);\n            }\n        }\n    } else {\n        achievements.forEach((achievement) => {\n            builtAchievements[achievement.name] = new Achievement(achievement);\n        });\n    }\n\n    State.achievements = builtAchievements;\n};\n","import { Upgrade } from '../Upgrades';\n\nexport const schoolUpgrades: Upgrade[] = [\n    {\n        name: 'Composition Notebooks',\n        flavorText: 'College ruled!',\n        price: 300,\n        onBuy: {\n            increaseBuildingProduction: ['school', 2]\n        }\n    },\n    {\n        name: 'No. 2 Pencil',\n        flavorText: 'Test ready!',\n        price: 1_000,\n        onBuy: {\n            increaseBuildingProduction: ['school', 2]\n        }\n    },\n    {\n        name: '3 Ring Binder',\n        flavorText: 'Be the Lord of the Rings with our new 2.5\" binder!',\n        price: 12_000,\n        onBuy: {\n            increaseBuildingProduction: ['school', 2]\n        }\n    },\n    {\n        name: 'Looseleaf',\n        flavorText: '\"Can I borrow a sheet?\"',\n        price: 450_000,\n        onBuy: {\n            increaseBuildingProduction: ['school', 2]\n        }\n    },\n    {\n        name: 'Schoolbag',\n        flavorText: 'Break your back carrying on of these stylish bags!',\n        price: 5_500_000,\n        onBuy: {\n            increaseBuildingProduction: ['school', 3]\n        }\n    },\n    {\n        name: 'Fresh Pink Eraser',\n        flavorText: 'Never use this. Keep it pristine.',\n        price: 22_500_000,\n        onBuy: {\n            increaseBuildingProduction: ['school', 2]\n        }\n    },\n    {\n        name: 'Gum',\n        flavorText: \"With this, you'll be the most popular kid in the class.\",\n        price: 620_000_000,\n        onBuy: {\n            increaseBuildingProduction: ['school', 2]\n        }\n    },\n    {\n        name: 'Hallpass',\n        flavorText: 'Wander the halls without a care in the world.',\n        price: 3_000_000_000_000,\n        onBuy: {\n            increaseBuildingProduction: ['school', 2]\n        }\n    },\n    {\n        name: 'Report Card',\n        flavorText: 'Determines your fate for the upcoming months.',\n        price: 82_000_000_000_000,\n        onBuy: {\n            increaseBuildingProduction: ['school', 2]\n        }\n    }\n];\n","import { Upgrade } from '../Upgrades';\n\nexport const farmUpgrades: Upgrade[] = [\n    {\n        name: 'Manure Spreader',\n        flavorText: 'The poop helps the ore mature.',\n        price: 950,\n        onBuy: {\n            increaseBuildingProduction: ['farm', 2]\n        }\n    },\n    {\n        name: 'Pitchfork',\n        flavorText: 'Torches not included...',\n        price: 12_500,\n        onBuy: {\n            increaseBuildingProduction: ['farm', 2]\n        }\n    },\n    {\n        name: 'Tractor',\n        flavorText: 'Im in me mums tractor.',\n        price: 265_000,\n        onBuy: {\n            increaseBuildingProduction: ['farm', 2]\n        }\n    },\n    {\n        name: 'Rotary Cutter',\n        flavorText: 'Not even grass can stop us now.',\n        price: 3_450_000,\n        onBuy: {\n            increaseBuildingProduction: ['farm', 2]\n        }\n    },\n    {\n        name: 'Hoe',\n        flavorText: 'hehe...',\n        price: 69_000_000,\n        onBuy: {\n            increaseBuildingProduction: ['farm', 2]\n        }\n    },\n    {\n        name: 'Baler',\n        flavorText: '\"Baler? I hardly know her.\"',\n        price: 400_000_000,\n        onBuy: {\n            increaseBuildingProduction: ['farm', 2]\n        }\n    },\n    {\n        name: 'Sickle',\n        flavorText: 'For easy sickle-ing of course.',\n        price: 4_700_300_000,\n        onBuy: {\n            increaseBuildingProduction: ['farm', 2]\n        }\n    },\n    {\n        name: 'Scythe',\n        flavorText: \"It's like a sickle... but bigger.\",\n        price: 70_000_000_000,\n        onBuy: {\n            increaseBuildingProduction: ['farm', 2]\n        }\n    }\n];\n","import { Upgrade } from '../Upgrades';\n\nexport const quarryUpgrades: Upgrade[] = [\n    {\n        name: 'Floodlights',\n        flavorText: 'Staring into one of them is like starting into a billion suns.',\n        price: 1_900,\n        onBuy: {\n            increaseBuildingProduction: ['quarry', 2]\n        }\n    },\n    {\n        name: 'Twill Rope',\n        flavorText: 'Study enuff...',\n        price: 11_000,\n        onBuy: {\n            increaseBuildingProduction: ['quarry', 2]\n        }\n    },\n    {\n        name: 'Wooden Compass',\n        flavorText: 'Responds to ore magnetism.',\n        price: 510_000,\n        onBuy: {\n            increaseBuildingProduction: ['quarry', 2]\n        }\n    },\n    {\n        name: 'Ore Filter',\n        flavorText: 'Less sorting, more ore.',\n        price: 7_000_000,\n        onBuy: {\n            increaseBuildingProduction: ['quarry', 2]\n        }\n    },\n    {\n        name: 'Waterproof Tape',\n        flavorText: 'Poor mans Flex Tape®',\n        price: 80_000_000,\n        onBuy: {\n            increaseBuildingProduction: ['quarry', 2]\n        }\n    },\n    {\n        name: 'Metallic Compass',\n        flavorText: 'Looks cooler, does the same thing.',\n        price: 210_500_000,\n        onBuy: {\n            increaseBuildingProduction: ['quarry', 2]\n        }\n    },\n    {\n        name: 'Miners Mask',\n        flavorText: 'Asbestos be gone!',\n        price: 5_000_000_000,\n        onBuy: {\n            increaseBuildingProduction: ['quarry', 2]\n        }\n    },\n    {\n        name: 'Cape Chisel',\n        flavorText: 'Faster than mining!',\n        price: 27_000_000_000,\n        onBuy: {\n            increaseBuildingProduction: ['quarry', 2]\n        }\n    },\n    {\n        name: 'Ore Splitter',\n        flavorText: 'Right down the middle',\n        price: 600_000_000_000,\n        onBuy: {\n            increaseBuildingProduction: ['quarry', 2]\n        }\n    },\n    {\n        name: 'Laser Drill',\n        flavorText: 'tbd',\n        price: 6_300_000_000_000,\n        onBuy: {\n            increaseBuildingProduction: ['quarry', 2]\n        }\n    }\n];\n","import { Upgrade } from '../Upgrades';\n\nexport const churchUpgrades: Upgrade[] = [\n    {\n        name: 'Scripture Reading',\n        flavorText: 'Read the words of our l-ore-d and savior.',\n        price: 60_000,\n        onBuy: {\n            increaseBuildingProduction: ['church', 2]\n        }\n    },\n    {\n        name: 'Communion',\n        flavorText: 'Note: Not communism.',\n        price: 740_000,\n        onBuy: {\n            increaseBuildingProduction: ['church', 2]\n        }\n    },\n    {\n        name: 'Worship Session',\n        flavorText: 'More like W-ore-ship... haha...',\n        price: 2_800_000,\n        onBuy: {\n            increaseBuildingProduction: ['church', 2]\n        }\n    },\n    {\n        name: '7th Day',\n        flavorText: 'You would think a day of worship is one less day of work but somehow it works out to more ore!',\n        price: 62_000_000,\n        onBuy: {\n            increaseBuildingProduction: ['church', 2]\n        }\n    },\n    {\n        name: 'Eden Apple',\n        flavorText: \"You can't resist this forbidden fruit.\",\n        price: 777_000_000,\n        onBuy: {\n            increaseBuildingProduction: ['church', 2]\n        }\n    },\n    {\n        name: 'Apocalypse',\n        flavorText: 'Hell on earth.',\n        price: 8_200_000_000,\n        onBuy: {\n            increaseBuildingProduction: ['church', 5]\n            // change_building_image: 'building-church-evil',\n            // change_building_desc: 'Praise to the Ore Demons',\n        }\n    },\n    {\n        name: 'Judgement Day',\n        flavorText: \"It's the end of the world.\",\n        price: 32_000_000_000,\n        onBuy: {\n            increaseBuildingProduction: ['church', 4]\n        }\n    },\n    {\n        name: 'Rapture',\n        flavorText: 'Are you saved?',\n        price: 700_000_000_000,\n        onBuy: {\n            increaseBuildingProduction: ['church', 4]\n        }\n    },\n    {\n        name: 'Chaos',\n        flavorText: '...',\n        price: 2_450_000_000_000,\n        onBuy: {\n            increaseBuildingProduction: ['church', 3]\n        }\n    },\n    {\n        name: 'Satanic Ritual',\n        flavorText: 'Sacrifices are the only way to appease the demons.',\n        price: 33_000_000_000_000,\n        onBuy: {\n            increaseBuildingProduction: ['church', 3]\n        }\n    }\n];\n","import { Upgrade } from '../Upgrades';\n\nexport const factoryUpgrades: Upgrade[] = [\n    {\n        name: 'Rubber Conveyor Belt',\n        flavorText: \"These moves the things to there, that's all I know.\",\n        price: 30_000,\n        onBuy: {\n            increaseBuildingProduction: ['factory', 2]\n        }\n    },\n    {\n        name: 'Floppy Squiggle Tubes',\n        flavorText: \"If I could tell you what these were for you'd buy twice as many.\",\n        price: 300_000,\n        onBuy: {\n            increaseBuildingProduction: ['factory', 2]\n        }\n    },\n    {\n        name: 'Clicky Squish Buttons',\n        flavorText: 'These go next to the Squishy Click Buttons.',\n        price: 44_000_000,\n        onBuy: {\n            increaseBuildingProduction: ['factory', 2]\n        }\n    },\n    {\n        name: 'Metallic Magnetic Panels',\n        flavorText: 'These are actually for my fridge.',\n        price: 800_000_000,\n        onBuy: {\n            increaseBuildingProduction: ['factory', 2]\n        }\n    },\n    {\n        name: 'Hydroponic Auxilleration',\n        flavorText: 'Aquaman is here to stay.',\n        price: 5_300_000_000,\n        onBuy: {\n            increaseBuildingProduction: ['factory', 2]\n        }\n    }\n];\n","import { schoolUpgrades } from './schoolUpgrades';\nimport { farmUpgrades } from './farmUpgrades';\nimport { quarryUpgrades } from './quarryUpgrades';\nimport { churchUpgrades } from './churchUpgrades';\nimport { factoryUpgrades } from './factoryUpgrades';\n\nexport const upgrades = {\n    schoolUpgrades,\n    farmUpgrades,\n    quarryUpgrades,\n    churchUpgrades,\n    factoryUpgrades\n};\n","import { findCodeNameInArr, isObjEmpty, getCodeName } from './utils';\nimport { State, InstanceState } from './State';\nimport { Building } from './Buildings';\nimport { showTooltip, hideTooltip } from './Tooltip';\nimport { upgrades as u } from './upgrades/index';\nimport { spend } from '.';\n\nexport interface Upgrade {\n    name: string;\n    flavorText?: string;\n    price: number;\n    onBuy: {\n        increaseBuildingProduction: [string, number];\n    };\n}\n\nconst Upgrade = function (upgrade) {\n    this.name = upgrade.name;\n    this.codeName = getCodeName(upgrade.name);\n    this.desc = upgrade.desc || buildUpgradeDesc(upgrade);\n    this.flavorText = upgrade.flavorText;\n    this.price = upgrade.price;\n    this.onBuy = upgrade.onBuy;\n    this.isLocked = upgrade.isLocked === false ? false : true;\n    this.isOwned = upgrade.isOwned === false ? false : false;\n\n    this.buy = (event: MouseEvent) => {\n        // if (spend(this.price)) {\n        //     this.isOwned = true\n        // }\n    };\n\n    this.mousemove = (event: MouseEvent): void => showTooltip(event, { type: 'upgrade', upgrade: this });\n};\n\nconst buildUpgradeDesc = (upgrade) => {\n    const building: Building = findCodeNameInArr(upgrade.onBuy.increaseBuildingProduction[0], InstanceState.buildings);\n\n    let desc = '';\n\n    switch (upgrade.onBuy.increaseBuildingProduction[1]) {\n        case 2:\n            desc += 'Doubles ';\n            break;\n        case 3:\n            desc += 'Triples ';\n            break;\n        case 4:\n            desc += 'Quadruples ';\n            break;\n        case 5:\n            desc += 'Quintuples ';\n            break;\n        default:\n            console.log('err with', upgrade.onBuy.increaseBuildingProduction[1]);\n    }\n\n    desc += `the production of ${building.namePlural}`;\n\n    return desc;\n};\n\nconst upgrades = [...u.schoolUpgrades, ...u.farmUpgrades, ...u.quarryUpgrades, ...u.churchUpgrades, ...u.factoryUpgrades];\n\nexport const instantiateUpgrades = (): void => {\n    const state = JSON.parse(localStorage.getItem('state'));\n\n    const builtUpgrades = {};\n\n    if (state) {\n        if (!isObjEmpty(state.upgrades)) {\n            for (let key in state.upgrades) {\n                builtUpgrades[key] = new Upgrade(state.upgrades[key]);\n            }\n        }\n    } else {\n        upgrades.forEach((upgrade) => {\n            builtUpgrades[upgrade.name] = new Upgrade(upgrade);\n        });\n    }\n\n    State.upgrades = builtUpgrades;\n};\n","import { State, InstanceState } from './State';\nimport { UpdatesState } from './Updates';\n\nimport * as constants from './constants';\nimport {\n    select,\n    getPercentage,\n    formatNumber,\n    getRandomNum,\n    removeEl,\n    updateEl,\n    createEl,\n    beautifyNumber,\n    getGeometricSequencePrice,\n    findCodeNameInArr,\n    getRandomFromArr,\n    sortObj\n} from './utils';\nimport { generateOreParticles } from './OreParticle';\nimport { generateRisingText } from './RisingText';\nimport { instantiateTabs, TabName, Tab } from './Tabs';\nimport { instantiateBuildings } from './Buildings';\nimport { showTooltip, hideTooltip } from './Tooltip';\nimport { Toast } from './Toast';\nimport { instantiateSmithUpgrades } from './SmithUpgrades';\nimport { instantiateAchievements } from './Achievements';\nimport { instantiateUpgrades } from './Upgrades';\n\nconst gainOre = (amount: number, damageOre: boolean = true) => {\n    State.inventory.ores += amount;\n\n    if (damageOre) handleOreDamage(amount);\n    UpdatesState.updateOres = true;\n};\n\nexport const spend = (amount: number, type: 'ores' | 'refined' = 'ores'): boolean => {\n    if (State.inventory[type] >= amount) {\n        State.inventory.ores -= amount;\n        return true;\n    }\n\n    return false;\n};\n\nconst handleOreDamage = (damage: number) => {\n    State.ore.hp -= damage;\n\n    if (State.ore.hp <= 0) handleBrokenOre();\n\n    UpdatesState.updateOreSprite = true;\n    UpdatesState.updateOreHp = true;\n};\n\nconst handleBrokenOre = () => {\n    gainGenerationXp(50);\n    generateNewOre();\n    State.ore.spriteType = getRandomNum(1, 5);\n\n    State.stats.rocksDestroyed++;\n    if (State.stats.rocksDestroyed === 1) winAchievement('Newbie Miner');\n    if (State.stats.rocksDestroyed === 10) winAchievement('Novice Miner');\n    if (State.stats.rocksDestroyed === 25) winAchievement('Intermediate Miner');\n    if (State.stats.rocksDestroyed === 50) winAchievement('Advanced Miner');\n    if (State.stats.rocksDestroyed === 100) winAchievement('Master Miner');\n    if (State.stats.rocksDestroyed === 200) winAchievement('Chief Miner');\n    if (State.stats.rocksDestroyed === 500) winAchievement('Exalted Miner');\n    if (State.stats.rocksDestroyed === 1000) winAchievement('God Miner');\n\n    if (State.stats.rocksDestroyed === 1) unlockTab('smith');\n};\n\nconst generateNewOre = () => {\n    State.ore.maxHp *= 1.13;\n    State.ore.hp = State.ore.maxHp;\n};\n\nconst updateComboSign = () => {\n    if (!constants.comboSignEl.classList.contains('visible')) instantiateComboSign();\n    constants.comboSignNumberEl.innerHTML = `${State.stats.currentCombo}`;\n};\n\nconst handleOreClick = (event: MouseEvent, weakSpotClick: boolean = false) => {\n    let amount = State.opc;\n\n    if (weakSpotClick) {\n        amount *= State.stats.weakSpotMultiplier;\n        State.stats.weakSpotClicks++;\n        State.stats.currentCombo++;\n\n        gainGenerationXp(3);\n        generateRisingText(event, 'weakSpot', amount);\n\n        if (State.stats.currentCombo % 5 === 0) generateRisingText(event, 'combo', State.stats.currentCombo);\n        if (State.stats.currentCombo > State.stats.highestCombo) State.stats.highestCombo = State.stats.currentCombo;\n\n        if (State.stats.currentCombo === 5) winAchievement('Combo Baby');\n        if (State.stats.currentCombo === 20) winAchievement('Combo Pleb');\n        if (State.stats.currentCombo === 50) winAchievement('Combo Squire');\n        if (State.stats.currentCombo === 100) winAchievement('Combo Knight');\n        if (State.stats.currentCombo === 200) winAchievement('Combo King');\n        if (State.stats.currentCombo === 350) winAchievement('Combo Master');\n        if (State.stats.currentCombo === 666) winAchievement('Combo Devil');\n        if (State.stats.currentCombo === 777) winAchievement('Combo Jackpot');\n        if (State.stats.currentCombo === 1000) winAchievement('Combo God');\n        if (State.stats.currentCombo === 5000) winAchievement('Combo Saiyan');\n        if (State.stats.currentCombo === 10000) winAchievement('Combo Saitama');\n        generateWeakSpot();\n    } else {\n        if (State.stats.currentCombo > 0) {\n            State.stats.currentCombo = 0;\n        }\n        gainGenerationXp(1);\n        generateRisingText(event, null, amount);\n    }\n\n    if (amount >= 100) winAchievement('Not Even A Scratch');\n    if (amount >= 1_000) winAchievement('Didnt Even Hurt');\n    if (amount >= 100_000) winAchievement('That Tickled');\n    if (amount >= 1_000_000) winAchievement('I Felt That');\n\n    updateComboSign();\n    gainOre(amount);\n    generateOreParticles(event);\n\n    State.stats.oreClicks++;\n};\n\nconst generateWeakSpot = () => {\n    let weakSpot = select('.weak-spot');\n    if (!weakSpot) {\n        weakSpot = createEl('div', ['weak-spot']);\n        weakSpot.addEventListener('click', (event: MouseEvent) => handleOreClick(event, true));\n        constants.oreSpriteContainerEl.append(weakSpot);\n    }\n\n    const x = getRandomNum(0, constants.oreSpriteContainerEl.offsetWidth - 20);\n    const y = getRandomNum(0, constants.oreSpriteContainerEl.offsetHeight - 20);\n\n    weakSpot.style.left = x + 'px';\n    weakSpot.style.bottom = y + 'px';\n};\n\nconst winAchievement = (achievementName: string) => {\n    const achievement = State.achievements[achievementName];\n    achievement.win();\n};\n\n// - -----------------------------------------------------------------------------------\n// - GENERATION STUFF ------------------------------------------------------------------\n// - -----------------------------------------------------------------------------------\n\nconst gainGenerationXp = (amount: number) => {\n    State.generation.xp += amount;\n    if (State.generation.xp >= State.generation.maxXp) handleGenerationLvlUp();\n    UpdatesState.updateGenerationXp = true;\n};\n\nconst handleGenerationLvlUp = () => {\n    State.generation.maxXp *= 1.15;\n    State.generation.xp = 0;\n    State.generation.lvOnRefine += 1;\n\n    UpdatesState.updateGenerationLvOnRefine = true;\n};\n\n// - -----------------------------------------------------------------------------------\n// - UPDATES ---------------------------------------------------------------------------\n// - -----------------------------------------------------------------------------------\n\nconst updateOres = () => {\n    let str = beautifyNumber(State.inventory.ores);\n\n    if (State.ops > 0) {\n        str += ` <span class='ops'>(${State.ops}/s)</span>`;\n    }\n\n    constants.topbarInventoryOresEl.innerHTML = `${str}`;\n\n    UpdatesState.updateOres = false;\n};\n\nconst updateOreHp = () => {\n    switch (State.settings.oreHpType) {\n        case 'percentage':\n            constants.oreHpEl.innerHTML = `${formatNumber(getPercentage(State.ore.hp, State.ore.maxHp))}%`;\n            break;\n        case 'number':\n            constants.oreHpEl.innerHTML = `${formatNumber(State.ore.hp)}/${formatNumber(State.ore.maxHp)}`;\n            break;\n        case 'none':\n        default:\n            return;\n    }\n    UpdatesState.updateOreHp = false;\n};\n\nconst updateOreSprite = () => {\n    constants.oreSpriteEl.src = `./images/ore${State.ore.spriteType}-${State.ore.spriteHp}.png`;\n\n    const differentOreSprites = 5;\n    const percentage = getPercentage(State.ore.hp, State.ore.maxHp);\n    const calcSprite = Math.min(differentOreSprites, 6 - Math.ceil(percentage / 20));\n\n    if (State.ore.spriteHp !== calcSprite) {\n        State.ore.spriteHp = calcSprite;\n        constants.oreSpriteEl.src = `./images/ore${State.ore.spriteType}-${State.ore.spriteHp}.png`;\n        generateOreParticles(null, 5);\n    }\n\n    UpdatesState.updateOreSprite = false;\n};\n\nconst updateGenerationLv = () => {\n    constants.topbarInventoryGenerationLv.innerHTML = `${State.generation.lv}`;\n    UpdatesState.updateGenerationLv = false;\n};\n\nconst updateGenerationLvOnRefine = () => {\n    if (State.generation.lv < State.generation.lvOnRefine) {\n        constants.topbarInventoryGenerationLvOnRefine.innerHTML = `(${State.generation.lvOnRefine})`;\n    }\n    UpdatesState.updateGenerationLvOnRefine = false;\n};\n\nconst updateGenerationXp = () => {\n    constants.topbarInventoryGenerationXpBarEl.style.width = getPercentage(State.generation.xp, State.generation.maxXp) + '%';\n    UpdatesState.updateGenerationXp = false;\n};\n\nexport const updateOPS = () => {\n    let ops = 0;\n\n    InstanceState.buildings.forEach((b) => {\n        ops += b.production * b.owned;\n    });\n\n    State.ops = ops;\n\n    if (ops >= 50) winAchievement('Ore-aid Stand');\n    if (ops >= 10000) winAchievement('Ore Store');\n    if (ops >= 401000) winAchievement('401k');\n    if (ops >= 5_000_000) winAchievement('Retirement Plan');\n    if (ops >= 1_000_000_000) winAchievement('Hedge Fund');\n\n    UpdatesState.updateOPS = false;\n};\n\nconst changeBuyAmount = (amount) => {\n    InstanceState.buyAmount = amount;\n    UpdatesState.updateTabContent = true;\n};\n\nconst updateStorePriceClasses = () => {\n    InstanceState.buildings.forEach((building) => {\n        if (!building.isHidden && !building.isLocked) {\n            const buildingPriceEl = document.querySelector(`.building-${building.codeName} .building-price`);\n            if (State.inventory.ores >= getGeometricSequencePrice(building)) {\n                if (buildingPriceEl.classList.contains('not-enough')) buildingPriceEl.classList.remove('not-enough');\n            } else {\n                if (!buildingPriceEl.classList.contains('not-enough')) buildingPriceEl.classList.add('not-enough');\n            }\n        }\n    });\n\n    for (const upgrade in State.upgrades) {\n        const u = State.upgrades[upgrade];\n        if (!u.isLocked && !u.isOwned) {\n            const upgradeEl = document.querySelector(`.upgrade-${u.codeName}`);\n            if (State.inventory.ores >= u.price) {\n                if (upgradeEl.classList.contains('not-enough')) upgradeEl.classList.remove('not-enough');\n            } else {\n                if (!upgradeEl.classList.contains('not-enough')) upgradeEl.classList.add('not-enough');\n            }\n        }\n        // console.log('upgrade', State.upgrades[upgrade]);\n    }\n};\n\n// - -----------------------------------------------------------------------------------\n// - SMITH STUFF -----------------------------------------------------------------------\n// - -----------------------------------------------------------------------------------\n\nconst updateSmithProgress = () => {\n    if (State.smith.currentProgress >= State.smith.currentUpgrade.powerNeeded) return;\n\n    const powerPerTick = State.smith.power / State.settings.tick;\n\n    if (spend(powerPerTick)) {\n        State.smith.currentProgress += powerPerTick;\n\n        updateSmithProgressBar();\n    }\n};\n\nconst updateSmithProgressBar = () => {\n    const tabProgressBar = select('.smith-tab-progress-bar .bar');\n    const percentage = getPercentage(State.smith.currentProgress, State.smith.currentUpgrade.powerNeeded);\n\n    tabProgressBar.style.width = percentage + '%';\n    tabProgressBar.style.filter = `grayscale( ${100 - percentage}% )`;\n\n    if (InstanceState.selectedTab === 'smith') {\n        if (percentage >= 100) {\n            UpdatesState.updateTabContent = true;\n            return;\n        }\n\n        const progressBar = select('.smith-progress-bar .bar');\n\n        progressBar.style.filter = `grayscale( ${100 - percentage}% )`;\n        progressBar.style.width = percentage + '%';\n    }\n};\n\nexport const completeSmithUpgrade = (codeName: string) => {\n    InstanceState.smithUpgrades.forEach((upgrade) => {\n        if (upgrade.codeName === codeName) {\n            upgrade.isOwned = true;\n\n            switch (codeName) {\n                case 'fragilitySpectacles':\n                    generateWeakSpot();\n                    break;\n                case 'smithPowerUp':\n                    State.smith.maxPower *= 1.5;\n                    break;\n                default:\n                    console.log('default case firing', codeName);\n            }\n\n            return;\n        }\n    });\n};\n\nconst updateSmithPower = (power) => {\n    const el = select('.smith-power');\n    State.smith.power = power;\n    el.innerHTML = power;\n};\n\n// - -----------------------------------------------------------------------------------\n// - TAB BUILD STUFF -------------------------------------------------------------------\n// - -----------------------------------------------------------------------------------\n\nconst updateTabs = (): void => {\n    const tabsContainer = document.createElement('div');\n    tabsContainer.classList.add('tabs-container');\n\n    InstanceState.tabs\n        .filter((tab: Tab) => !tab.isLocked)\n        .forEach((tab: Tab) => {\n            const tabEl = createEl('div', ['tab', `tab-${tab.codeName}`]);\n\n            tabEl.addEventListener('click', () => changeTab(tab.codeName));\n\n            if (InstanceState.selectedTab === tab.codeName) tabEl.classList.add('tab-selected');\n\n            tabEl.innerHTML = tab.name;\n            if (tab.codeName === 'smith' && State.smith.inProgress) {\n                tabEl.innerHTML = `\n                    ${tab.name}\n                    <div class='smith-tab-progress-bar'>\n                        <div class='bar'></div>\n                    </div>\n                `;\n            }\n\n            tabsContainer.append(tabEl);\n        });\n\n    updateEl(constants.tabsWrapperEl, tabsContainer);\n\n    UpdatesState.updateTabs = false;\n};\n\nconst changeTab = (tab: TabName): void => {\n    if (InstanceState.selectedTab !== tab) {\n        InstanceState.selectedTab = tab;\n        UpdatesState.updateTabs = true;\n        updateTabContent();\n    }\n};\n\nconst unlockTab = (tabName: string): void => {\n    InstanceState.tabs.forEach((tab) => {\n        if (tab.codeName === tabName) {\n            tab.isLocked = false;\n            UpdatesState.updateTabs = true;\n            return;\n        }\n    });\n};\n\nconst updateTabContent = (): void => {\n    const tabsContentContainer = document.createElement('div');\n    tabsContentContainer.classList.add('tabs-content-container');\n\n    let tabContent;\n\n    switch (InstanceState.selectedTab) {\n        case 'store':\n            tabContent = buildStoreTabContent();\n            break;\n        case 'smith':\n            tabContent = buildSmithTabContent();\n            break;\n        default:\n            console.log('not built yet');\n    }\n\n    tabsContentContainer.append(tabContent);\n    updateEl(constants.tabsContentWrapperEl, tabsContentContainer);\n\n    UpdatesState.updateTabContent = false;\n};\n\nconst buildStoreTabContent = (): HTMLElement => {\n    const storeTabContainer = createEl('div', ['tab-content', 'tab-content-store']);\n\n    const upgradesContainer = buildUpgrades();\n    const buyAmountContainer = buildBuyAmountContainer();\n    const buildingsContainer = buildBuildings();\n\n    if (upgradesContainer.innerHTML) storeTabContainer.append(upgradesContainer);\n    storeTabContainer.append(buyAmountContainer);\n    storeTabContainer.append(buildingsContainer);\n\n    return storeTabContainer;\n};\n\nconst buildUpgrades = (): HTMLElement => {\n    const upgradesContainer = createEl('div', ['upgrades-container']);\n    upgradesContainer.addEventListener('mouseenter', () => resizeUpgradesContainer('enter'));\n    upgradesContainer.addEventListener('mouseleave', () => resizeUpgradesContainer('leave'));\n\n    sortObj(State.upgrades, 'price')\n        .filter((upgrade: any) => !upgrade[1].isOwned && !upgrade[1].isLocked)\n        .forEach((upgrade: any) => {\n            const upgradeEl = createEl(\n                'div',\n                ['upgrade', `upgrade-${upgrade[1].codeName}`, `${State.inventory.ores < upgrade[1].price && 'not-enough'}`],\n                `\n                <img src='./images/upgrade-${upgrade[1].codeName}.png'/>\n            `\n            );\n            upgradeEl.addEventListener('mousemove', (event: MouseEvent) => upgrade[1].mousemove(event));\n            upgradeEl.addEventListener('mouseleave', (event: MouseEvent) => hideTooltip());\n            upgradesContainer.append(upgradeEl);\n        });\n\n    return upgradesContainer;\n};\n\nconst resizeUpgradesContainer = (type: 'enter' | 'leave') => {\n    const upgradesContainer: HTMLElement = select('.upgrades-container');\n    if (type === 'enter') upgradesContainer.style.height = upgradesContainer.scrollHeight + 'px';\n    if (type === 'leave') upgradesContainer.style.height = '60px';\n};\n\nconst buildBuildings = (): HTMLElement => {\n    const buildingsContainer = createEl('div', ['buildings-container']);\n\n    InstanceState.buildings\n        .filter((building) => !building.isHidden)\n        .forEach((building) => {\n            const buildingEl = createEl('div', ['building', `building-${building.codeName}`, `${building.isLocked && 'locked'}`]);\n            const price = getGeometricSequencePrice(building);\n\n            let str = `<img class='building-img' src='./images/building-${building.codeName}.png' />`;\n\n            if (!building.isLocked) {\n                str += `\n                    <div class='building-left'>\n                        <p class='building-name'>${building.name} ${InstanceState.buyAmount != 1 ? `x${InstanceState.buyAmount}` : ''}</p>\n                        <p class='building-price'>\n                            <img src='./images/ore.png' />\n                            ${beautifyNumber(price)}\n                        </p>\n                    </div>\n                    <p class='building-owned'>${building.owned}</p>\n                `;\n            }\n\n            buildingEl.innerHTML = str;\n\n            if (!building.isLocked) {\n                buildingEl.addEventListener('click', (event) => building.buy(event));\n                buildingEl.addEventListener('mousemove', (event) => building.mousemove(event));\n                buildingEl.addEventListener('mouseleave', () => hideTooltip());\n            }\n\n            buildingsContainer.append(buildingEl);\n        });\n\n    return buildingsContainer;\n};\n\nconst buildBuyAmountContainer = (): HTMLElement => {\n    const buyAmountContainer = document.createElement('div');\n    buyAmountContainer.classList.add('buy-amount-container');\n\n    const buyAmountText = createEl('p', ['buy-amount-text'], 'Buy Amount');\n\n    const buyAmounts = document.createElement('div');\n    buyAmounts.classList.add('buy-amounts');\n\n    const buyAmountChoices = [1, 10, 100, 'max'];\n    buyAmountChoices.forEach((amount) => {\n        const buyAmount = createEl('p', ['buy-amount'], amount);\n        buyAmount.addEventListener('click', () => changeBuyAmount(amount));\n        if (amount === InstanceState.buyAmount) {\n            buyAmount.classList.add('selected');\n        }\n        buyAmounts.append(buyAmount);\n    });\n\n    buyAmountContainer.append(buyAmountText);\n    buyAmountContainer.append(buyAmounts);\n\n    return buyAmountContainer;\n};\n\nconst buildSmithTabContent = (): HTMLElement => {\n    const smithTabContentContainer = createEl('div', ['tab-content', 'tab-content-smith']);\n    const underTabBar = createEl('div', ['under-tab-bar']);\n\n    const smithSettingsContainer = buildSmithSettings();\n    const smithProgressContainer = State.smith.inProgress ? buildSmithProgressContainer() : '';\n    const smithUpgradesContainer = buildSmithUpgrades();\n\n    smithTabContentContainer.append(underTabBar);\n    smithTabContentContainer.append(smithSettingsContainer);\n    smithTabContentContainer.append(smithProgressContainer);\n    smithTabContentContainer.append(smithUpgradesContainer);\n\n    return smithTabContentContainer;\n};\n\nconst buildSmithProgressContainer = (): HTMLElement => {\n    const smithProgressContainer = createEl('div', ['smith-progress-container']);\n    const upgrade = State.smith.currentUpgrade;\n    const percentage = getPercentage(State.smith.currentProgress, upgrade.powerNeeded);\n\n    const smithProgressTopEl = createEl(\n        'div',\n        ['smith-progress-top'],\n        `\n        <p class='smith-upgrade-name'>${upgrade.name}</p>\n        `\n    );\n\n    const collectBtn = createEl('button', ['collect-btn'], 'COLLECT');\n    collectBtn.addEventListener('click', () => upgrade.complete());\n\n    const smithProgressBottom =\n        percentage >= 100\n            ? collectBtn\n            : createEl(\n                  'div',\n                  ['smith-progress-bar'],\n                  ` <div class='smith-progress-bar'>\n                        <div class='bar'></div>\n                    </div>`\n              );\n\n    const div = createEl('div');\n    div.append(smithProgressTopEl);\n    div.append(smithProgressBottom);\n\n    const upgradeImg = document.createElement('img');\n    upgradeImg.src = `./images/smithUpgrade-${upgrade.codeName}.png`;\n\n    smithProgressContainer.append(upgradeImg);\n    smithProgressContainer.append(div);\n\n    return smithProgressContainer;\n};\n\nconst buildSmithUpgrades = (): HTMLElement => {\n    const smithUpgradesWrapper = createEl('div', ['smith-upgrades-wrapper']);\n\n    const availableUpgradesHeader = createEl('p', ['smith-header-text'], 'Available Upgrades');\n    const lockedUpgradesHeader = createEl('p', ['smith-header-text', 'small'], 'Locked Upgrades');\n    const ownedUpgradesHeader = createEl('p', ['smith-header-text', 'small'], 'Owned Upgrades');\n\n    const smithAvailableUpgradesContainer = createEl('div', ['smith-upgrades-container', 'available-smith-upgrades-container']);\n    const smithLockedUpgradesContainer = createEl('div', ['smith-upgrades-container', 'locked-smith-upgrades-container']);\n    const smithOwnedUpgradesContainer = createEl('div', ['smith-upgrades-container', 'owned-smith-upgrades-container']);\n\n    let hasAvailableUpgrades = false;\n    let hasLockedUpgrades = false;\n    let hasOwnedUpgrades = false;\n\n    InstanceState.smithUpgrades.forEach((upgrade) => {\n        const upgradeEl = createEl('div', ['smith-upgrade']);\n        const upgradeImg = document.createElement('img');\n        upgradeImg.src = `./images/smithUpgrade-${upgrade.codeName}.png`;\n\n        upgradeEl.append(upgradeImg);\n\n        if (upgrade.isNew) {\n            const newText = createEl('p', ['new'], 'New!');\n            upgradeEl.append(newText);\n        }\n\n        if (\n            (!upgrade.isLocked && !upgrade.isOwned && !upgrade.isInProgress) ||\n            (upgrade.isRepeatable && !upgrade.isLocked && !upgrade.isInProgress)\n        ) {\n            hasAvailableUpgrades = true;\n            upgradeEl.addEventListener('click', (event) => upgrade.buy(event));\n            upgradeEl.addEventListener('mouseover', (event) => upgrade.removeNew(event));\n            upgradeEl.addEventListener('mousemove', (event) => showTooltip(event, { type: 'smithUpgrade', smithUpgrade: upgrade }));\n            upgradeEl.addEventListener('mouseleave', () => hideTooltip());\n            smithAvailableUpgradesContainer.append(upgradeEl);\n        } else if (upgrade.isLocked) {\n            hasLockedUpgrades = true;\n            smithLockedUpgradesContainer.append(upgradeEl);\n        } else if (upgrade.isOwned) {\n            hasOwnedUpgrades = true;\n            upgradeEl.addEventListener('mousemove', (event) => showTooltip(event, { type: 'smithUpgrade', smithUpgrade: upgrade }));\n            upgradeEl.addEventListener('mouseleave', () => hideTooltip());\n            smithOwnedUpgradesContainer.append(upgradeEl);\n        }\n    });\n\n    if (hasAvailableUpgrades) {\n        smithUpgradesWrapper.append(availableUpgradesHeader);\n        smithUpgradesWrapper.append(smithAvailableUpgradesContainer);\n    }\n\n    // if (hasLockedUpgrades) {\n    //     smithUpgradesWrapper.append(lockedUpgradesHeader);\n    //     smithUpgradesWrapper.append(smithLockedUpgradesContainer);\n    // }\n\n    if (hasOwnedUpgrades) {\n        smithUpgradesWrapper.append(ownedUpgradesHeader);\n        smithUpgradesWrapper.append(smithOwnedUpgradesContainer);\n    }\n\n    return smithUpgradesWrapper;\n};\n\nconst buildSmithSettings = (): HTMLElement => {\n    const el = createEl(\n        'div',\n        ['smith-settings-container'],\n        `\n        <p class='smith-power-text'>Smith Power</p>\n        <p class='smith-power'>${State.smith.power}</p>\n    `\n    );\n\n    const inputRange = document.createElement('input');\n    inputRange.classList.add('smith-slider');\n    inputRange.type = 'range';\n    inputRange.min = '0';\n    inputRange.max = `${State.smith.maxPower}`;\n    inputRange.value = `${State.smith.power}`;\n    inputRange.step = '1';\n    inputRange.addEventListener('input', (e: any) => updateSmithPower(e.target.value));\n\n    el.append(inputRange);\n\n    return el;\n};\n\n// - -----------------------------------------------------------------------------------\n// - TEXT SCROLLER ---------------------------------------------------------------------\n// - -----------------------------------------------------------------------------------\n\nconst startTextScroller = () => {\n    const selectedMessage = getRandomFromArr(State.textScrollerMessages);\n    constants.textScrollerTextEl.innerHTML = selectedMessage;\n    InstanceState.textScroller.isInProgress = true;\n};\n\nconst moveTextInScroller = () => {\n    const speed = State.settings.tick === 30 ? 2 : 1;\n    const currentLeft = constants.textScrollerTextEl.offsetLeft;\n\n    constants.textScrollerTextEl.style.left = currentLeft - speed + 'px';\n\n    if (currentLeft + constants.textScrollerTextEl.offsetWidth <= 0) {\n        constants.textScrollerTextEl.innerHTML = '';\n        constants.textScrollerTextEl.style.left = '100%';\n        InstanceState.textScroller.isInProgress = false;\n        startTextScroller();\n    }\n};\n\n// - -----------------------------------------------------------------------------------\n// - INIT STUFF ------------------------------------------------------------------------\n// - -----------------------------------------------------------------------------------\n\nlet tick = 0;\nconst gameLoop = () => {\n    if (UpdatesState.updateOres) updateOres();\n    if (UpdatesState.updateOreHp) updateOreHp();\n    if (UpdatesState.updateOreSprite) updateOreSprite();\n    if (UpdatesState.updateGenerationLv) updateGenerationLv();\n    if (UpdatesState.updateGenerationXp) updateGenerationXp();\n    if (UpdatesState.updateGenerationLvOnRefine) updateGenerationLvOnRefine();\n    if (UpdatesState.updateTabs) updateTabs();\n    if (UpdatesState.updateTabContent) updateTabContent();\n    if (UpdatesState.updateOPS) updateOPS();\n\n    if (InstanceState.selectedTab === 'store') {\n        updateStorePriceClasses();\n    }\n\n    if (InstanceState.textScroller.isInProgress) moveTextInScroller();\n    if (State.smith.inProgress) updateSmithProgress();\n\n    gainOre(State.ops / State.settings.tick, false);\n\n    if (Object.keys(InstanceState.oreParticles).length > 0) {\n        constants.particlesCanvasContext.clearRect(\n            0,\n            0,\n            constants.particlesCanvasContext.canvas.width,\n            constants.particlesCanvasContext.canvas.height\n        );\n        for (let i in InstanceState.oreParticles) InstanceState.oreParticles[i].draw();\n    }\n\n    tick++;\n    if (tick >= State.settings.tick) {\n        tick = 0;\n        if (State.ops > 0) generateRisingText(null, 'buildingOps', State.ops);\n    }\n};\n\nconst initiateCanvasParticles = () => {\n    constants.particlesCanvasEl.height = window.innerHeight;\n    constants.particlesCanvasEl.width = window.innerWidth;\n};\n\nconst instantiateComboSign = () => {\n    if (State.stats.highestCombo >= 5) {\n        constants.comboSignEl.classList.add('visible');\n    }\n};\n\nconst initialLoad = () => {\n    initiateCanvasParticles();\n    instantiateTabs();\n    instantiateBuildings();\n    instantiateSmithUpgrades();\n    instantiateAchievements();\n    instantiateComboSign();\n    instantiateUpgrades();\n\n    constants.oreSpriteEl.onclick = handleOreClick;\n\n    // ! DELETE LATER - TESTING\n    startTextScroller();\n\n    setInterval(gameLoop, 1000 / State.settings.tick);\n};\n\nwindow.onload = () => initialLoad();\n\n// - -----------------------------------------------------------------------------------\n// - TESTING PURPOSES -------------------------------------------------------------------\n// - -----------------------------------------------------------------------------------\n\nvar before, now, fps;\nlet fpsEl: HTMLElement = document.querySelector('.fps');\nfpsEl.style.zIndex = '5';\nbefore = Date.now();\nrequestAnimationFrame(function loop() {\n    now = Date.now();\n    fps = Math.round(1000 / (now - before));\n    before = now;\n    requestAnimationFrame(loop);\n    fpsEl.innerHTML = fps;\n});\n"]}